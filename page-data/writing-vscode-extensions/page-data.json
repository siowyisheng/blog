{"componentChunkName":"component---src-templates-blog-post-js","path":"/writing-vscode-extensions/","result":{"data":{"site":{"siteMetadata":{"title":"Life Design Games Code"}},"markdownRemark":{"id":"169d1a9c-43eb-53a6-a01a-3b4a1a17a739","excerpt":"After writing my first chrome extension last week. Today, I explored writing a language support vscode extension for writing TagUI scripts. Interesting…","html":"<p>After writing my first chrome extension last week. Today, I explored writing a language support vscode extension for writing TagUI scripts.</p>\n<h4>Interesting capabilities of vscode extensions</h4>\n<ol>\n<li>Access the filesystem.</li>\n<li>Register commands to the command palette.</li>\n<li>Register context menu items (when right-clicking).</li>\n<li>Store data.</li>\n<li>Display notifications.</li>\n<li>Get user input through a wizard (called QuickPick).</li>\n<li>Change colors of code/UI.</li>\n<li>Change file icons.</li>\n<li>Show info when hovering some api.</li>\n<li>Add autocomplete for a language.</li>\n<li>Show information in the status bar.</li>\n<li>Show custom content (with WebView API).</li>\n<li>Highlight syntax for a language.</li>\n</ol>\n<h4>On language extensions</h4>\n<p>You can write a <strong>Language Server</strong>, which is text-editor-agnostic, or just code directly for vscode.</p>\n<p>I’ll write more as I discover more.</p>","frontmatter":{"title":"Writing VSCode Extensions","date":"December 05, 2019","description":null}},"previous":{"fields":{"slug":"/jigoku-chrome-extension/"},"frontmatter":{"title":"I Wrote the Jigoku Game Log Chrome Extension"}},"next":{"fields":{"slug":"/on-getting-back-to-blogging/"},"frontmatter":{"title":"On getting back to blogging"}}},"pageContext":{"id":"169d1a9c-43eb-53a6-a01a-3b4a1a17a739","previousPostId":"9b46d140-5fc6-5ea8-a1d9-e86ce17fadc2","nextPostId":"b8d4315d-edef-5007-93af-fc44d2553d01"}},"staticQueryHashes":["1126892257","2841359383","3257411868"]}